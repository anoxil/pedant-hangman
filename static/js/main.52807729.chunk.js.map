{"version":3,"sources":["Header.jsx","Home.jsx","ButtonLetter.jsx","Game.jsx","index.js"],"names":["Header","className","to","src","process","alt","title","href","target","rel","Home","useState","headPos","setHeadPos","useEffect","setTimeout","type","ButtonLetter","props","onClick","selectLetter","char","disabled","gameEnded","toUpperCase","Game","mysteryWord","setMysteryWord","userWord","setUserWord","gameState","setGameState","notClicked","correctClicked","incorrectClicked","alphabetInput","setAlphabetInput","wordDefinition","setWordDefinition","definitionDisplayed","setDefinitionDisplayed","nbErrors","setNbErrors","newGame","fetch","then","response","json","data","word","toLowerCase","array","i","length","push","initEmptyUserWordList","definition","gameWon","catch","error","console","log","alert","inputLetter","indexList","filter","previousLetter","map","c","index","includes","join","id","letter","App","basename","onUpdate","window","scrollTo","exact","path","children","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52807729.chunk.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport \"./Header.css\"\n\nexport default function Header() {\n    return (\n        <div className=\"header\">\n            <Link to=\"/\">\n                <div className=\"homeButton\">\n                    <img src={process.env.PUBLIC_URL + `/images/pedantor/pedantor.png`} alt=\"Home\" title=\"home\" /><span>Pedant Hangman</span>\n                </div>\n            </Link>\n            <div className=\"icons\">\n                <a href=\"https://anoxil.github.io/\">\n                    <img src={process.env.PUBLIC_URL + `/images/hub_icon.png`} className=\"hubIcon\" alt=\"Hub\" title=\"anoxil's hub\" />\n                </a>\n                <a href=\"https://github.com/anoxil\" target=\"_blank\" rel=\"noreferrer\">\n                    <img src={process.env.PUBLIC_URL + `/images/git_icon.png`} className=\"gitIcon\" alt=\"Git\" title=\"anoxil's github\" />\n                </a>\n            </div>\n        </div >\n    )\n}","import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport \"./Home.css\"\n\nexport default function Home() {\n    const [headPos, setHeadPos] = useState(0)\n\n    useEffect(() => {\n        setTimeout(() => {\n            setHeadPos((headPos + 1) % 3)\n        }, 2000)\n    }, [headPos])\n\n    return (\n        <div className=\"menu\">\n            <img src={`${process.env.PUBLIC_URL}/images/pedantor/hangman_throne_${headPos}.png`} alt=\"Hangman\" />\n            <Link to=\"/play\"><button type=\"button\">partake in the festivities</button></Link>\n            <p className=\"taunt\"><span className=\"apostrophe\">“</span>How quaint, you yearn to trounce my own self. Sublime, shall we commence? <span className=\"apostrophe\">”</span></p>\n        </div >\n    )\n}\n","import React from \"react\"\n\nexport default function ButtonLetter(props) {\n    return (\n        <button\n            type=\"button\"\n            onClick={() => props.selectLetter(props.char)}\n            disabled={props.gameEnded}\n            className=\"disabled:opacity-40\"\n        >\n            { props.char.toUpperCase()}\n        </button >\n    )\n}","import React, { useState, useEffect } from \"react\"\n\nimport ButtonLetter from \"./ButtonLetter.jsx\"\nimport \"./Game.css\"\n\nexport default function Game() {\n    const [mysteryWord, setMysteryWord] = useState(null)\n    const [userWord, setUserWord] = useState([])\n    const [gameState, setGameState] = useState({})\n    const [alphabetInput, setAlphabetInput] = useState({ notClicked: [], correctClicked: [], incorrectClicked: [] })\n    const [wordDefinition, setWordDefinition] = useState(null)\n    const [definitionDisplayed, setDefinitionDisplayed] = useState(false)\n    const [nbErrors, setNbErrors] = useState(0)\n\n    function initEmptyUserWordList(word) {\n        let array = []\n        for (let i = 0; i < word.length; i++) {\n            array.push('_')\n        }\n        return array\n    }\n\n    function initAlphabetInput() {\n        setAlphabetInput(\n            {\n                notClicked: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n                correctClicked: [],\n                incorrectClicked: []\n            }\n        )\n    }\n\n    function newGame() {\n        fetch(\"https://random-words-api.vercel.app/word\")\n            .then((response) => {\n                return response.json()\n            })\n            .then((data) => {\n                // console.log(data)\n                let word = data[0].word.toLowerCase()\n                setNbErrors(0)\n                setDefinitionDisplayed(false)\n                initAlphabetInput()\n                setMysteryWord(word)\n                setUserWord(initEmptyUserWordList(word))\n                setWordDefinition(data[0].definition)\n                setGameState({\n                    gameEnded: false,\n                    gameWon: false\n                })\n            })\n            .catch((error) => {\n                console.log(error)\n                alert(\"Couldn't fetch data from API, try again later...\")\n            })\n    }\n\n    function checkLoseWin() {\n        // lose\n        if (nbErrors >= 9) {\n            setGameState({\n                gameEnded: true,\n                gameWon: false\n            })\n            setDefinitionDisplayed(true)\n        }\n        // win\n        else if (mysteryWord === userWord.join('')) {\n            setGameState({\n                gameEnded: true,\n                gameWon: true\n            })\n            setDefinitionDisplayed(true)\n        }\n    }\n\n    function selectLetter(inputLetter) {\n        let indexList = []\n        for (let i = 0; i < mysteryWord.length; i++) {\n            if (mysteryWord[i] === inputLetter) indexList.push(i)\n        }\n        // correct letter clicked\n        if (indexList.length) {\n            setAlphabetInput({\n                notClicked: alphabetInput.notClicked.filter(previousLetter => previousLetter !== inputLetter),\n                correctClicked: [...alphabetInput.correctClicked, inputLetter],\n                incorrectClicked: alphabetInput.incorrectClicked\n            })\n            setUserWord(userWord.map((c, index) => { return (indexList.includes(index) ? inputLetter : c) }))\n        }\n        // incorrect letter clicked\n        else {\n            setNbErrors(nbErrors + 1)\n            setAlphabetInput({\n                notClicked: alphabetInput.notClicked.filter(previousLetter => previousLetter !== inputLetter),\n                correctClicked: alphabetInput.correctClicked,\n                incorrectClicked: [...alphabetInput.incorrectClicked, inputLetter]\n            })\n        }\n    }\n\n    useEffect(() => {\n        checkLoseWin()\n    }, [nbErrors, userWord])\n\n    useEffect(() => {\n        newGame()\n    }, [])\n\n    return (\n        <div>\n            <div className=\"playground\">\n                <div className=\"game\">\n                    <img src={`${process.env.PUBLIC_URL}/images/pedantor/hangman${nbErrors}.png`} alt={`hangman error n°${nbErrors}`} />\n                    { // end game text\n                        gameState.gameEnded && ((gameState.gameWon) ?\n                            <div className=\"endText\">you prevailed. <span id=\"link\" onClick={newGame}>try again?</span></div>\n                            :\n                            <div className=\"endText\">you've been vanquished, the word was <span id=\"mysteryWord\">{mysteryWord}</span>. <span id=\"link\" onClick={newGame}>try again?</span></div>)\n                    }\n                    <div className=\"inputZone\">\n                        <div className=\"userLetters\">\n                            {userWord.map((letter, index) => { return <span key={index}>{letter}</span> })}\n                        </div>\n                        {definitionDisplayed && <div className=\"definition\">{wordDefinition}</div>}\n                        <div className=\"notClickedLetters px-3 md:px-5 py-1 md:py-2 gap-2 md:gap-4\">\n                            {alphabetInput.notClicked.map((letter, index) => { return <ButtonLetter key={index} char={letter} selectLetter={selectLetter} gameEnded={gameState.gameEnded} /> })}\n                        </div>\n                        <div className=\"clickedLetters\">\n                            <div className=\"rightLetters\">\n                                {alphabetInput.correctClicked.join(\" - \")}\n                            </div>\n                            <div className=\"wrongLetters\">\n                                {alphabetInput.incorrectClicked.join(\" - \")}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"options\">\n                <button type=\"button\" onClick={newGame}>new word</button>\n                {!definitionDisplayed && <button type=\"button\" onClick={() => { setDefinitionDisplayed(true) }}>get definition</button>}\n            </div>\n        </div>\n    )\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\n\nimport Header from \"./Header.jsx\"\nimport Home from \"./Home.jsx\"\nimport Game from \"./Game.jsx\"\nimport \"./index.css\"\n\nfunction App() {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL} onUpdate={() => window.scrollTo(0, 0)}>\n            <Switch>\n                <Route exact path=\"/\" children={<div><Header /><Home /></div>}></Route>\n                <Route path=\"/play\" children={<div><Header /><Game /></div>}></Route>\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}